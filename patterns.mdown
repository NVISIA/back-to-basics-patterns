# Back to Basics Series
## Best Practice Patterns in Web Applications
---
## Courtney Faulkner
### July 23, 2014



## Common Web Application
![tiers](img/tiers.png "Web App Tiers")



## Patterns
- DAO
- Service
- MVC
- Front Controller
- JavaBean
- Dependency Injection (in contrast to Service Locator pattern)
- Singleton
- Factory
- Proxy
- Strategy vs. Template Method

Notes: some of this is a refresher on the patterns we see every day and may not consider often, and some is
suggestions on using the patterns well. Patterns represent reusable design, and are important to know in order
to communicate design more efficiently.



## DAO
- Encapsulates the data access logic
- Often one DAO represents one table in a well engineered DB schema, or one logical domain/grouping (e.g. CustomerDao) in a misaligned DB schema
- Default transaction boundaries are the methods in the DAO when using Spring + Hibernate/JPA
- Implement as a pair of interface and implementation classes



## Service
- Acts as a the API to the middle tier
- Aggregates business logic and DAOs
- Shoot for one service call per URL
- Often the logical place for transaction boundaries
- Implement as a pair of interface and implementation classes



## MVC
- Separates the presentation layer concerns into models, views, and controllers
- Should contain only presentation logic
- Minimize calls to services/consolidate services
- No calls to DAOs
- Becomes MV* in SPAs


## Front Controller
- Serves as the entry point for request handling, providing a single location for common request logic
- Not usually something custom built
- e.g. the Spring Web MVC `DispatcherServlet`
![mvc](img/mvc.png "Spring Web MVC")



## JavaBean
- Public no-arg constructor, serializable, getters/setters
- Intended to hold and transport data
- No business logic
- Should implement equals, hashcode, and toString

Notes:
Getters and setters are typically boilerplate code. Other JVM languages like Groovy will expose them by default,
reducing the code noise. Project Lombak has annotations to expose getters and setters.



## Dependency Injection
- Separates the sender from the receiver so that the sender is not coupled to the receiver's implementation
- Allows for mocks, dynamic proxies, multiple implementations
- Injection points are defined at instance variables or setters
- Run-time injection strategies vary by framework (type, variable name, id, or custom construction)

Notes:
Spring is the most common DI framework we use.

With loose coupling, you lose code clarity.. what implements this DAO?  Where is the transaction coming from?
You are deferring more of the system's behavior to runtime instead of compile time (i.e. you don't know what it will do by just looking at the code)
To get the full advantages of DI, classes should have small interfaces and not do too much. If you have a WonderClass that does everything, then replacing its implementation with an alternate one is more problematic; you don't have fine grained control over the runtime behavior of your system.

DI is not a cure-all. It is perfectly possible to write tightly coupled code and use DI, e.g. if FooJpaDao writes a flag and BarJpaDao reads the flag, they are tightly coupled and any code in Foo and Bar not concerned with that flag becomes tightly coupled. That flag _should_ only be known about by either FooJpaDao or BarJpaDoa.


## Service Locator
- Every service consumer depends on the locator
- Hides true dependencies within the code
- Testing with mocks/stubs is easy with either, if the locator is written well
- Locators get complicated when components are shared/reused
- Dependencies are created as needed
- Useful when blending frameworks that want to instantiate objects (ex. spring + quartz)

Notes:
The spring + quartz example would be using Spring's DI as a service locator.



## Singleton
- The white bread toast of patterns: plain, yet awesome
- Serves to reuse object instances to save from repeated instantiation costs
- Spring DI beans are singletons by default
- Be mindful of the state in singleton objects



## Factory
- Object for creating other objects
- Beyond naive dependency constructor, factories provide instances of dependent objects
- Spring DI runs internally on factories, to replace traditional custom code that would have provided dependent objects
- When possible, reuse the objects instantiated by the factory with the `Singleton` pattern



## Proxy
- Functions as an interface to a object (JDK Dynamic Proxy API creates dynamic proxies through reflection)
- Does not require compilation of custom code/aspects
- Spring DI creates dynamic proxies to many of the beans in its application context
- `@Secured`, `@Transactional`, `@Cached` are examples of annotations that instruct Spring to create proxies that add behavior to the objects
- Spring AOP uses JDK dynamic proxies (or CGLIB) to create advised objects via runtime weaving, rather than compile-time or load-time weaving



## Strategy vs. Template Method
- Both defer part of the implementation to another class
- Template Method uses compile-time deferring: you subclass and implement its abstract method (e.g. Struts 1.x Action class)
- Strategy defers the implementations at runtime, e.g.
```
class Document {
	print(PrintStrategy ps) {
		ps.print(this)
	}
}
```
vs
```
class Document {
	abstract void print()
}
```

Notes:
Tradeoffs between runtime vs compile-time: runtime behavior is mostly knowable at runtime, whereas code can be inspected to more easily determine compile-time behavior.



## Miscellaneous
- Encapsulate what varies - paraphrased from _Design Patterns: Elements of Reusable Object-Oriented Software_
- Don't log and rethrow exceptions (leads to horrible logs)
- Don't use checked exceptions if an operation is unrecoverable
- Don't throw exceptions that expose your underlying implementation (SQLException, IOException)
- Try to make APIs agnostic about implementations ("How would my API change if I used a web service instead of JPA?")


## Miscellaneous
- Shield as much code from the UI as you can (convert parameters from Strings to their actual types early)
- Minimize one-off utility methods/classes, and don't reinvent the wheel
- No javax.servlet in the service layer or beyond
- Use inheritance sparingly
- Avoid blindly applying OO patterns to a function language (e.g. command pattern in Javascript)
- Look for code smell, and anti-patterns (lots of books, sites on this)

Notes: command patterns are simulated closures, so simulating it in a language like Javascript that support closures is silly
